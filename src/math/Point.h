// /////////////////////////////////////////////////////////////////
// @file Point.h
// @author PJ O Halloran
// @date 16/12/2009
//
// File contains the header for the Point class.
//
// /////////////////////////////////////////////////////////////////

#ifndef __POINT_H
#define __POINT_H

// External Headers

// Project Headers
#include "GameTypes.h"

namespace GameHalloran {
    // /////////////////////////////////////////////////////////////////
    // @class Point
    // @author PJ O Halloran
    //
    // This class represents a 2D point.
    //
    // /////////////////////////////////////////////////////////////////
    class Point {
    private:

        I32 m_x;                ///< The location of the point along the x axis.
        I32 m_y;                ///< The location of the point along the y axis.

    public:

        // /////////////////////////////////////////////////////////////////
        // Default constructor.
        //
        // The Point begins at the location (0, 0).
        //
        // /////////////////////////////////////////////////////////////////
        Point();

        // /////////////////////////////////////////////////////////////////
        // Custom constructor.
        //
        // Initializes the Point with the position supplied.
        //
        // @param I32 The location of the Point along the x axis.
        // @param I32 The location of the Point along the y axis.
        //
        // /////////////////////////////////////////////////////////////////
        Point(const I32 x, const I32 y);

        // /////////////////////////////////////////////////////////////////
        // Copy constructor.
        //
        // Initializes the Point with the Point supplied.
        //
        // @param I32 The location of the Point along the x axis.
        // @param I32 The location of the Point along the y axis.
        //
        // /////////////////////////////////////////////////////////////////
        Point(const Point &pointRef);

        // /////////////////////////////////////////////////////////////////
        // Destructor.
        //
        // /////////////////////////////////////////////////////////////////
        ~Point();

        // /////////////////////////////////////////////////////////////////
        // Set the current position of the point along the x axis.
        //
        // /////////////////////////////////////////////////////////////////
        void SetX(const I32 x);

        // /////////////////////////////////////////////////////////////////
        // Get the current position of the point along the x axis.
        //
        // /////////////////////////////////////////////////////////////////
        I32 GetX() const;

        // /////////////////////////////////////////////////////////////////
        // Set the current position of the point along the y axis.
        //
        // /////////////////////////////////////////////////////////////////
        void SetY(const I32 y);

        // /////////////////////////////////////////////////////////////////
        // Get the current position of the point along the y axis.
        //
        // /////////////////////////////////////////////////////////////////
        I32 GetY() const;

        // /////////////////////////////////////////////////////////////////
        // Set the point equal to the Point supplied.
        //
        // /////////////////////////////////////////////////////////////////
        void operator=(const Point &pointRef);

        // /////////////////////////////////////////////////////////////////
        // Check if this point is equivalent to the point supplied.
        //
        // @return True if the point is equivalent and false otherwise.
        //
        // /////////////////////////////////////////////////////////////////
        bool operator==(const Point &pointRef);

        // /////////////////////////////////////////////////////////////////
        // Check if this point is less than to the point supplied.
        //
        // @return True if the point is less than and false otherwise.
        //
        // /////////////////////////////////////////////////////////////////
        bool operator<(const Point &pointRef);

        // /////////////////////////////////////////////////////////////////
        // Get the distance between this point and the point supplied.
        //
        // TODO: This calls sqrt from cmath.  Its relatively slow, maybe
        // replace with an approximation for calculating the distance
        // between 2 points if this function slows things down.
        //
        // /////////////////////////////////////////////////////////////////
        F32 Distance(const Point &pointRef) const;

    };
}

#endif
