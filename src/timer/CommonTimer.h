// /////////////////////////////////////////////////////////////////
// @file CommonTimer.h
// @author PJ O Halloran
// @date 16/08/2010
//
// File contains the header for the CommonTimer abstract game timer
// class that all game timer classes should inherit from.
//
// Please note this class is adapted from the lazyfoo SDL (timer) 
// tutorials:
// http://www.lazyfoo.net/SDL_tutorials/index.php
//
// It was modified to strip out the SDL specifics for derived classes
// to implement.
// 
// /////////////////////////////////////////////////////////////////

#ifndef __GF_COMMON_TIMER_H
#define __GF_COMMON_TIMER_H

// External Headers


// Project Headers
#include "IGameTimer.h"


namespace GameHalloran
{
	// /////////////////////////////////////////////////////////////////
	// @class CommonTimer
	// @author PJ O Halloran
	//
	// This class defines and implements common functionality for game
	// timer classes.
	//
	// /////////////////////////////////////////////////////////////////
	class CommonTimer : public IGameTimer
	{
	private:

		F64 m_startTicks;				///< The number of ticks when the timer started.
		F64 m_pausedTicks;				///< The number of ticks when the timer was paused.
		bool m_started;						///< Has the timer been started.
		bool m_paused;						///< Is the timer currently paused.

		// /////////////////////////////////////////////////////////////////
		// Get the current tick count from the underlying OS in a platform 
		// specific way.
		//
		// This can only be implemented by derived classes.
		//
		// /////////////////////////////////////////////////////////////////
		virtual F64 VGetTicks() = 0;

	protected:

		// /////////////////////////////////////////////////////////////////
		// Get and set the private member holding the tick count when the
		// timer was started.
		//
		// /////////////////////////////////////////////////////////////////
		void SetStartTicks(const F64 st) { m_startTicks = st; };
		F64 GetStartTicks() const { return (m_startTicks); };

		// /////////////////////////////////////////////////////////////////
		// Get and set the private member holding the tick count when the
		// timer was paused.
		//
		// /////////////////////////////////////////////////////////////////
		void SetPauseTicks(const F64 pt) { m_pausedTicks = pt; };
		F64 GetPauseTicks() const { return (m_pausedTicks); };

	public:
		
		// /////////////////////////////////////////////////////////////////
		// Constructor.
		//
		// /////////////////////////////////////////////////////////////////
		CommonTimer() : m_startTicks(0.0), m_pausedTicks(0.0), m_paused(false), m_started(false) { };

		// /////////////////////////////////////////////////////////////////
		// Destructor.
		//
		// /////////////////////////////////////////////////////////////////
		virtual ~CommonTimer() { };
		
		// /////////////////////////////////////////////////////////////////
		// Start the timer.
		//
		// /////////////////////////////////////////////////////////////////
		virtual void VStart();
		
		// /////////////////////////////////////////////////////////////////
		// Stop the timer.
		//
		// /////////////////////////////////////////////////////////////////
		virtual void VStop();
		
		// /////////////////////////////////////////////////////////////////
		// Pause the timer.
		//
		// /////////////////////////////////////////////////////////////////
		virtual void VPause();
		
		// /////////////////////////////////////////////////////////////////
		// Unpause the timer.
		//
		// /////////////////////////////////////////////////////////////////
		virtual void VUnPause();
		
		// /////////////////////////////////////////////////////////////////
		// Get the current time since the timer was started (not including
		// any time for which the timer was paused).
		//
		// /////////////////////////////////////////////////////////////////
		F64 VGetTime();
		
		// /////////////////////////////////////////////////////////////////
		// Check if the timer has started.
		//
		// /////////////////////////////////////////////////////////////////
		virtual bool VIsStarted() const;
		
		// /////////////////////////////////////////////////////////////////
		// Check if the timer is currently paused.
		//
		// /////////////////////////////////////////////////////////////////
		virtual bool VIsPaused() const;
			
	};
}

#endif
