// /////////////////////////////////////////////////////////////////
// @file IGameTimer.h
// @author PJ O Halloran
// @date 16/08/2010
//
// File contains the interface for the game timer classes.
//
// /////////////////////////////////////////////////////////////////

#ifndef __I_GAME_TIMER_H
#define __I_GAME_TIMER_H

// External Headers


// Project Headers
#include "GameTypes.h"


namespace GameHalloran
{
	// /////////////////////////////////////////////////////////////////
	// @class IGameTimer
	// @author PJ O Halloran
	//
	// This class defines an interface for stopping, starting and 
	// querying a timer.
	//
	// /////////////////////////////////////////////////////////////////
	class IGameTimer
	{
	private:

		// /////////////////////////////////////////////////////////////////
		// Get the current tick count from the underlying OS in a platform 
		// specific way.
		//
		// /////////////////////////////////////////////////////////////////
		virtual F64 VGetTicks() = 0;

	public:
			
		// /////////////////////////////////////////////////////////////////
		// Destructor.
		//
		// /////////////////////////////////////////////////////////////////
		virtual ~IGameTimer() { };
		
		// /////////////////////////////////////////////////////////////////
		// Start the timer.
		//
		// /////////////////////////////////////////////////////////////////
		virtual void VStart() = 0;
		
		// /////////////////////////////////////////////////////////////////
		// Stop the timer.
		//
		// /////////////////////////////////////////////////////////////////
		virtual void VStop() = 0;
		
		// /////////////////////////////////////////////////////////////////
		// Pause the timer.
		//
		// /////////////////////////////////////////////////////////////////
		virtual void VPause() = 0;
		
		// /////////////////////////////////////////////////////////////////
		// Unpause the timer.
		//
		// /////////////////////////////////////////////////////////////////
		virtual void VUnPause() = 0;
		
		// /////////////////////////////////////////////////////////////////
		// Get the current time since the timer was started (not including
		// any time for which the timer was paused).
		//
		// /////////////////////////////////////////////////////////////////
		virtual F64 VGetTime() = 0;
		
		// /////////////////////////////////////////////////////////////////
		// Check if the timer has started.
		//
		// /////////////////////////////////////////////////////////////////
		virtual bool VIsStarted() const = 0;
		
		// /////////////////////////////////////////////////////////////////
		// Check if the timer is currently paused.
		//
		// /////////////////////////////////////////////////////////////////
		virtual bool VIsPaused() const = 0;
			
	};
}

#endif
