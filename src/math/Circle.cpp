// /////////////////////////////////////////////////////////////////
// @file Circle.cpp
// @author PJ O Halloran
// @date 26/12/2009
//
// File contains the implementation of the Circle class.
//
// /////////////////////////////////////////////////////////////////

// External headers
#include <cmath>

// Project headers
#include "Circle.h"

// Namespace Declarations

namespace GameHalloran
{

	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	Circle::Circle() : m_loc(), m_r(1)
	{
	}

	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	Circle::Circle(const Point &locRef, const I32 radius) : m_loc(locRef), m_r(radius)
	{
	}
	
	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	Circle::Circle(const Circle &circleRef) : m_loc(circleRef.m_loc), m_r(circleRef.m_r)
	{
	}

	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	Circle::~Circle()
	{
		try
		{
		}
		catch(...)
		{
		}
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	void Circle::SetRadius(const I32 radius)
	{
		m_r = radius;
	}

	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	I32 Circle::GetRadius() const
	{
		return (m_r);
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	void Circle::SetCentrePoint(const Point &locRef)
	{
		m_loc = locRef;
	}

	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	Point Circle::GetCentrePoint() const
	{
		return (m_loc);
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	void Circle::operator=(const Circle &circleRef)
	{
		m_loc = circleRef.m_loc;
		m_r = circleRef.m_r;
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	bool Circle::operator==(const Circle &circleRef)
	{
		return ((m_r == circleRef.m_r) && (m_loc == circleRef.m_loc));
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	bool Circle::operator<(const Circle &circleRef)
	{
		return ((m_r < circleRef.m_r) && (m_loc < circleRef.m_loc));
	}

	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	bool Circle::IsPointInside(const Point &pointRef) const
	{
		const F32 distance = m_loc.Distance(pointRef);			// Distance from centre of the circle to the point.

		// If the distance between the point and the centre is less than or equal to the
		//  circles radius (taking into consideration floating point error), 
		//   then it is inside the Circle.
		if(std::abs(distance - m_r) <= 0.01f)
		{
			return (true);
		}

		return (false);
	}

}
