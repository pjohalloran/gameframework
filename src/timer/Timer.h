#pragma once
#ifndef __GF_TIMER_H
#define __GF_TIMER_H

// /////////////////////////////////////////////////////////////////
// @file Timer.h
// @author PJ O Halloran
// @date 16/08/2010
//
// File contains the header for the Timer.
//
// /////////////////////////////////////////////////////////////////

#include "GameBase.h"

namespace GameHalloran {
    // /////////////////////////////////////////////////////////////////
    // @class Timer
    // @author PJ O Halloran
    //
    // This class defines and implements common functionality for game
    // timer classes.
    //
    // /////////////////////////////////////////////////////////////////
    class Timer {
    private:

        F64 m_startTicks;               ///< The number of ticks when the timer started.
        F64 m_pausedTicks;              ///< The number of ticks when the timer was paused.
        bool m_started;                 ///< Has the timer been started.
        bool m_paused;                  ///< Is the timer currently paused.

        // /////////////////////////////////////////////////////////////////
        // Get the current tick count from the underlying OS in a platform
        // specific way.
        //
        // This can only be implemented by derived classes.
        //
        // /////////////////////////////////////////////////////////////////
        F64 GetTicks() {
            return (F64)glfwGetTime();
        };

    protected:

        // /////////////////////////////////////////////////////////////////
        // Get and set the private member holding the tick count when the
        // timer was started.
        //
        // /////////////////////////////////////////////////////////////////
        void SetStartTicks(const F64 st) {
            m_startTicks = st;
        };
        F64 GetStartTicks() const {
            return (m_startTicks);
        };

        // /////////////////////////////////////////////////////////////////
        // Get and set the private member holding the tick count when the
        // timer was paused.
        //
        // /////////////////////////////////////////////////////////////////
        void SetPauseTicks(const F64 pt) {
            m_pausedTicks = pt;
        };
        F64 GetPauseTicks() const {
            return (m_pausedTicks);
        };

    public:

        // /////////////////////////////////////////////////////////////////
        // Constructor.
        //
        // /////////////////////////////////////////////////////////////////
        Timer() : m_startTicks(0.0), m_pausedTicks(0.0), m_paused(false), m_started(false) { };

        // /////////////////////////////////////////////////////////////////
        // Destructor.
        //
        // /////////////////////////////////////////////////////////////////
        ~Timer() { };

        // /////////////////////////////////////////////////////////////////
        // Start the timer.
        //
        // /////////////////////////////////////////////////////////////////
        void Start();

        // /////////////////////////////////////////////////////////////////
        // Stop the timer.
        //
        // /////////////////////////////////////////////////////////////////
        void Stop();

        // /////////////////////////////////////////////////////////////////
        // Pause the timer.
        //
        // /////////////////////////////////////////////////////////////////
        void Pause();

        // /////////////////////////////////////////////////////////////////
        // Unpause the timer.
        //
        // /////////////////////////////////////////////////////////////////
        void UnPause();

        // /////////////////////////////////////////////////////////////////
        // Get the current time since the timer was started (not including
        // any time for which the timer was paused).
        //
        // /////////////////////////////////////////////////////////////////
        F64 GetTime();

        // /////////////////////////////////////////////////////////////////
        // Check if the timer has started.
        //
        // /////////////////////////////////////////////////////////////////
        bool IsStarted() const;

        // /////////////////////////////////////////////////////////////////
        // Check if the timer is currently paused.
        //
        // /////////////////////////////////////////////////////////////////
        bool IsPaused() const;

    };
}

#endif
