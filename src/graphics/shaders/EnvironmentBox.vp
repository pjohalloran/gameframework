// /////////////////////////////////////////////////////////////////
// @file EnvironmentBox.vp
// @author PJ O Halloran & Richard S. Wright Jr.
//
// This shader is used to render a cubemap on the inside of a cube.
//
// This can give the effect of being in a wide open environment
// (depending on the textures used).
//
// This shader is based on the SkyBox example in the OpenGL Superbible
// 5th edition, Chapter 7 - Advanced Textures.
//
// /////////////////////////////////////////////////////////////////

// Use GL shader version 3.2
#version 150

// /////////////////////////////////////////////////////////////////
// ******************* Input parameters ****************************
// /////////////////////////////////////////////////////////////////
in vec4 vertexPos;				// Input position.
// /////////////////////////////////////////////////////////////////


// /////////////////////////////////////////////////////////////////
// ******************* Uniform/Batch constants *********************
// /////////////////////////////////////////////////////////////////
uniform mat4 mvpMatrix;			// MVP Transformation matrix.
// /////////////////////////////////////////////////////////////////


// /////////////////////////////////////////////////////////////////
// ******************* Output parameters ***************************
// /////////////////////////////////////////////////////////////////
varying vec3 varyTexCoord;		// Texture coordinate to fragment program.
// /////////////////////////////////////////////////////////////////


// /////////////////////////////////////////////////////////////////
// Main entry point of shader program.
//
// /////////////////////////////////////////////////////////////////
void main(void) 
{
    // Pass on the texture coordinates.
    // Explanation:
    // The vertex position is also a vector with a tail at the centre
    //  of the cube and the head at the vertex.  If we normalize this
    //   vector and interplate it between vertices, we get the texture
    //    coordinates for each fragment on the cubemap!
    varyTexCoord = normalize(vertexPos.xyz);

    // Don't forget to transform the geometry!
    gl_Position = mvpMatrix * vertexPos;
}
