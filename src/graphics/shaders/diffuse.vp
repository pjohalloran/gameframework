// /////////////////////////////////////////////////////////////////
// @file diffuse.vp
// @author Richard S. Wright Jr. and PJ O Halloran.
// @date 21/09/2010
//
// Difuse light vertex shader.  The shader claculates the color of a
// vertex depending on its location and the location of some spot
// light (supplied as a uniform).
//
// /////////////////////////////////////////////////////////////////

#version 130

// Incoming per vertex... position and normal
in vec4 vertexPos;
in vec3 normalVec;

// Set per batch
uniform vec4	diffuseColor;
uniform vec3	lightPos;
uniform mat4	mvpMatrix;
uniform mat4	mvMatrix;
uniform mat3	normalMatrix;

// Color to fragment program (to be smoothly interpolated across the primitive)
smooth out vec4 varyingColorVec;

void main(void) 
{ 
    // Get surface normal in eye coordinates
    vec3 eyeNormal = normalMatrix * normalVec;

    // Get vertex position in eye coordinates
    vec4 eyeVertexPos4 = mvMatrix * vertexPos;
    vec3 eyeVertexPos3 = eyeVertexPos4.xyz / eyeVertexPos4.w;

    // Get vector to light source
    vec3 lightDirVec = normalize(lightPos - eyeVertexPos3);

    // Dot product gives us diffuse intensity
    float diff = max(0.0, dot(eyeNormal, lightDirVec));

    // Multiply intensity by diffuse color
    varyingColorVec.rgb = diff * diffuseColor.rgb;
    varyingColorVec.a = diffuseColor.a;

    // Let's not forget to transform the geometry
    gl_Position = mvpMatrix * vertexPos;
}
