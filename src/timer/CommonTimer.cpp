// /////////////////////////////////////////////////////////////////
// @file CommonTimer.cpp
// @author PJ O Halloran
// @date 16/08/2010
//
// File contains the implementation of the CommonTimer class.
//
// /////////////////////////////////////////////////////////////////

// External headers


// Project headers
#include "CommonTimer.h"


// Namespace Declarations

namespace GameHalloran
{	
	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	void CommonTimer::VStart()
	{
		// Get the current clock time and start the timer.
		m_started = true;
		m_paused = false;
		m_startTicks = VGetTicks(); 
	}
	
	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	void CommonTimer::VStop()
	{
		// Stop and unpause the timer
		m_started = false;
		m_paused = false;
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	void CommonTimer::VPause()
	{
		if((m_started) && (!m_paused))
		{
			//Pause the timer and calculate the paused ticks
			m_paused = true;
			m_pausedTicks = VGetTicks() - m_startTicks;
		} 
	}
	
	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	void CommonTimer::VUnPause()
	{
		if(m_paused)
		{
			// Unpause the timer, reset the paused ticks and recalculate the start ticks
			m_paused = false;
			m_startTicks = VGetTicks() - m_pausedTicks;
			m_pausedTicks = 0;
		}
	}
	
	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	F64 CommonTimer::VGetTime()
	{
		if(m_started)
		{
			if(m_paused)
			{
				return (m_pausedTicks);
			}
			else
			{
				// Return the current time minus the start time
				F64 currTime = VGetTicks();
				return (currTime - m_startTicks);
			}
		}
		
		// The timer is not currently running
		return (0);
	}
	
	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	bool CommonTimer::VIsStarted() const
	{
		return (m_started);
	}
	
	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	bool CommonTimer::VIsPaused() const
	{
		return (m_paused);
	}
}
