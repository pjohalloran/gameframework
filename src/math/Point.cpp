// /////////////////////////////////////////////////////////////////
// @file Point.cpp
// @author PJ O Halloran
// @date 12/12/2009
//
// File contains the implementation of the Point class.
//
// /////////////////////////////////////////////////////////////////

// External headers
#include <cmath>

// Project headers
#include "Point.h"

// Namespace Declarations

namespace GameHalloran
{

	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	Point::Point() : m_x(0), m_y(0)
	{
	}

	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	Point::Point(const I32 x, const I32 y) : m_x(x), m_y(y)
	{
	}
	
	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	Point::Point(const Point &pointRef) : m_x(pointRef.m_x), m_y(pointRef.m_y)
	{
	}

	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	Point::~Point()
	{
		try
		{
		}
		catch(...)
		{
		}
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	void Point::SetX(const I32 x)
	{
		m_x = x;
	}

	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	I32 Point::GetX() const
	{
		return (m_x);
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	void Point::SetY(const I32 y)
	{
		m_y = y;
	}

	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	I32 Point::GetY() const
	{
		return (m_y);
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	void Point::operator=(const Point &pointRef)
	{
		m_x = pointRef.m_x;
		m_y = pointRef.m_y;
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	bool Point::operator==(const Point &pointRef)
	{
		return ((m_x == pointRef.m_x) && (m_y == pointRef.m_y));
	}
	
	// /////////////////////////////////////////////////////////////////
	//
	// /////////////////////////////////////////////////////////////////
	bool Point::operator<(const Point &pointRef)
	{
		return ((m_x < pointRef.m_x) && (m_y < pointRef.m_y));
	}

	// /////////////////////////////////////////////////////////////////
	// 
	// /////////////////////////////////////////////////////////////////
	F32 Point::Distance(const Point &pointRef) const
	{
		return (sqrt(pow(static_cast<F32>(pointRef.m_x - m_x), 2.0f) + pow(static_cast<F32>(pointRef.m_y - m_y), 2.0f)));
	}

}
