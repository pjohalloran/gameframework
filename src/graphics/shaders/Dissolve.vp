// /////////////////////////////////////////////////////////////////
// @file Dissolve.vp
// @author Richard S. Wright Jr. and PJ O Halloran.
// @date 22/09/2010
//
// Applies the Phong shading model to each vertex and also shows
// use of the discard command in the fragment shader to make a 
// primitive appear to dissolve over time.
//
// /////////////////////////////////////////////////////////////////

#version 130

// Incoming per vertex... position and normal
in vec4 vertexPos;
in vec3 normalVec;
in vec2 texCoords0Vec;


uniform mat4   mvpMatrix;
uniform mat4   mvMatrix;
uniform mat3   normalMatrix;
uniform vec3   lightPosition;

// Color to fragment program
smooth out vec3 varyingNormalVec;
smooth out vec3 varyingLightDir;
smooth out vec2 varyingTexCoordVec;


void main(void) 
{
    // Pass on the texture coordinates 
    varyingTexCoordVec = texCoords0Vec;

    // Get surface normal in eye coordinates
    varyingNormalVec = normalMatrix * normalVec;

    // Get vertex position in eye coordinates
    vec4 eyeVertexPos4 = mvMatrix * vertexPos;
    vec3 eyeVertexPos3 = eyeVertexPos4.xyz / eyeVertexPos4.w;

    // Get vector to light source
    varyingLightDir = normalize(lightPosition - eyeVertexPos3);


    // Don't forget to transform the geometry!
    gl_Position = mvpMatrix * vertexPos;
}
